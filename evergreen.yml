#######################################
#         YAML Templates              #
#######################################
variables:
  - &build-tasks
      - name: build
      - name: push
  - &build-tasks-with-0mq
      - name: build
      - name: push
      - name: build-0mq
      - name: push-curve-keygen

#######################################
#              Functions              #
#######################################
functions:
  run-make:
    command: shell.exec
    params:
       script: |
         set -o errexit
         set -o verbose

         root_dir=$(pwd)

         cd nagmq/nagioscore-repo
         cp -p $root_dir/nagmq/config.guess.20160515 config.guess
         cp -p $root_dir/nagmq/config.sub.20160620 config.sub
         ./configure

         cd $root_dir/nagmq

         autoreconf -i
         export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig/:/usr/lib64/pkgconfig:$PKG_CONFIG_PATH"
         ./configure --with-nagios4-src=$root_dir/nagmq/nagioscore-repo libev_LIBS="-L${lib_path} -lev" libev_CFLAGS="-I/usr/include" ${extra_options} --exec-prefix=$root_dir/nagmq_bin
         make
         make install

         tar zcf $root_dir/nagmq.tar.gz -C $root_dir/nagmq_bin .
         rm -rf $root_dir/nagmq_bin/bin $root_dir/nagmq_bin/lib
         tar zcf $root_dir/nagmq-client.tar.gz -C $root_dir/nagmq_bin .

#######################################
#                Tasks                #
#######################################
tasks:
  # the build (with and without the race detector) and lint tasks use
  # a template that does not include test result parsing.
  - name: build
    commands:
      - command: git.get_project
        params:
          directory: "nagmq"
          revisions: # for each module include revision as <module_name> : ${<module_name>_rev}
            nagioscore-repo: ${nagioscore-repo_rev}
      - func: run-make
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_file: nagmq.tar.gz
          remote_file: nagmq/${build_variant}/nagmq-${build_id}.tar.gz
          bucket: mciuploads
          content_type: application/x-gzip
          permissions: public-read
          display_name: nagmq-${revision}.tar.gz
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_file: nagmq-client.tar.gz
          remote_file: nagmq/${build_variant}/nagmq-client-${build_id}.tar.gz
          bucket: mciuploads
          content_type: application/x-gzip
          permissions: public-read
          display_name: nagmq-client-${revision}.tar.gz

  - name: build-0mq
    commands:
      - command: shell.exec
        params:
         script: |
           set -o errexit
           set -o verbose
           root_dir=$(pwd)

           wget https://s3.amazonaws.com/boxes.10gen.com/build/${zeromq_ver}.tar.gz
           tar zxf ${zeromq_ver}.tar.gz
           mkdir 0mq
           cd ${zeromq_ver}

           ./autogen.sh
           ./configure 
           make
           make check
           make DESTDIR=$root_dir/0mq install

           tar zcf $root_dir/curve_keygen.tar.gz -C $root_dir/0mq/usr/local/bin .
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_file: curve_keygen.tar.gz
          remote_file: nagmq/${build_variant}/curve_keygen-${build_id}.tar.gz
          bucket: mciuploads
          content_type: application/x-gzip
          permissions: public-read
          display_name: curve_keygen-${revision}.tar.gz

  - name: push
    depends_on:
    - name: "build"
    stepback: false
    commands:
      - command: s3Copy.copy
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          s3_copy_files:
          - {'source': { 'path': 'nagmq/${build_variant}/nagmq-${build_id}.tar.gz', 'bucket': 'mciuploads' },
             'destination': { 'path': 'build/nagmq/nagmq-${build_variant}-${revision}.tar.gz', 'bucket': 'boxes.10gen.com' }
            }
      - command: s3Copy.copy
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          s3_copy_files:
          - {'source': { 'path': 'nagmq/${build_variant}/nagmq-client-${build_id}.tar.gz', 'bucket': 'mciuploads' },
             'destination': { 'path': 'build/nagmq/nagmq-client-${build_variant}-${revision}.tar.gz', 'bucket': 'boxes.10gen.com' }
            }


  - name: push-curve-keygen
    depends_on:
    - name: "build-0mq"
    stepback: false
    commands:
      - command: s3Copy.copy
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          s3_copy_files:
          - {'source': { 'path': 'nagmq/${build_variant}/curve_keygen-${build_id}.tar.gz', 'bucket': 'mciuploads' },
             'destination': { 'path': 'build/nagmq/curve_keygen-${build_variant}-${revision}.tar.gz', 'bucket': 'boxes.10gen.com' }
            }

post:
  - command: shell.exec
    params:
      script: |
        rm -rf nagmq
        rm -rf nagioscore-repo

#######################################
#               Modules               #
#######################################
# if a module is added and to be added to the manifest
# be sure to add the module to git.get_project revisions parameter
modules:
- name: nagioscore-repo
  repo: git@github.com:NagiosEnterprises/nagioscore.git
  branch: c3b627d3f4dcb2823d50c36436233b8a56315300

#######################################
#           Buildvariants             #
#######################################
buildvariants:
  - name: ubuntu1604-aarch64
    modules:
      - nagioscore-repo
    display_name: Ubuntu 16.04 ARM
    expansions:
      lib_path: "/usr/lib/x86_64-linux-gnu/"
      zeromq_ver: "zeromq-4.1.4"
    run_on:
      - ubuntu1604-arm64-small
    tasks:
      *build-tasks-with-0mq

  - name: ubuntu1604-s390x
    modules:
      - nagioscore-repo
    display_name: Ubuntu 16.04 zSeries 
    expansions:
      lib_path: "/usr/lib/x86_64-linux-gnu/"
      zeromq_ver: "zeromq-4.1.4"
    run_on:
      - ubuntu1604-zseries-small
    tasks:
      *build-tasks-with-0mq

  - name: ubuntu1604-x86_64
    modules:
      - nagioscore-repo
    display_name: Ubuntu 16.04
    expansions:
      lib_path: "/usr/lib/x86_64-linux-gnu/"
      zeromq_ver: "zeromq-4.1.4"
    run_on:
      - ubuntu1604-test
    tasks:
      *build-tasks-with-0mq

  - name: ubuntu1604-ppc64le
    modules:
      - nagioscore-repo
    display_name: Ubuntu 16.04 PPC
    expansions:
      lib_path: "/usr/lib/x86_64-linux-gnu/"
      zeromq_ver: "zeromq-4.1.4"
    run_on:
      - ubuntu1604-power8-test
    tasks:
      *build-tasks-with-0mq

  - name: osx-x86_64
    modules:
      - nagioscore-repo
    display_name: Mac OSX 10.12
    expansions:
      lib_path: "/usr/local/lib/"
    run_on:
      - macos-1012
    tasks:
      *build-tasks

  - name: rhel71-ppc64le
    modules:
      - nagioscore-repo
    display_name: RHEL 7.1 PPC
    expansions:
      lib_path: "/usr/lib/"
    run_on:
      - rhel71-power8-test
    tasks:
      *build-tasks

  - name: rhel72-s390x
    modules:
      - nagioscore-repo
    display_name: RHEL 7.2 zSeries
    expansions:
      lib_path: "/usr/lib/"
    run_on:
      - rhel72-zseries-test
    tasks:
      *build-tasks

  - name: sles12-s390x
    modules:
      - nagioscore-repo
    display_name: SLES 12 zSeries
    expansions:
      lib_path: "/usr/lib/"
      extra_options: 'libpcre_LIBS="-L/usr/lib64" libpcre_CFLAGS="-I/usr/include"'
    run_on:
      - suse12-zseries-test
    tasks:
      *build-tasks

  - name: rhel67-s390x
    modules:
      - nagioscore-repo
    display_name: RHEL 6.7 zSeries
    expansions:
      lib_path: "/usr/lib/"
      extra_options: 'libpcre_LIBS="-L/lib64" libpcre_CFLAGS="-I/usr/include"'
    run_on:
      - rhel67-zseries-test
    tasks:
      *build-tasks
